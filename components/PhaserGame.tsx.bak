'use client';
import React, { useEffect, useRef } from 'react';
import type { Game } from 'phaser';

type Props = { selectedFile?: string };

export default function PhaserGame({ selectedFile }: Props) {
  const rootRef = useRef<HTMLDivElement | null>(null);
  const gameRef = useRef<Game | null>(null);

  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        console.log('[PhaserGame] useEffect start');
        const Phaser = await import('phaser');
        const { BootScene } = await import('../phaser/scenes/BootScene');
        const { MenuScene } = await import('../phaser/scenes/MenuScene');
        const { PlayScene } = await import('../phaser/scenes/PlayScene');

        if (!mounted || !rootRef.current) return;

        const config: Phaser.Types.Core.GameConfig = {
          type: Phaser.AUTO,
          parent: rootRef.current,
          width: rootRef.current.clientWidth || 800,
          height: rootRef.current.clientHeight || 600,
          backgroundColor: '#061025',
          physics: { default: 'arcade', arcade: { gravity: { x: 0, y: 0 }, debug: false } },
          scale: { mode: Phaser.Scale.RESIZE, autoCenter: Phaser.Scale.CENTER_BOTH },
          scene: [BootScene, MenuScene, PlayScene],
        };

        gameRef.current = new Phaser.Game(config);
        (window as any).__PHASER_GAME__ = gameRef.current;
        console.log('[PhaserGame] created gameRef', !!gameRef.current);
      } catch (err) {
        console.error('[PhaserGame] init error', err);
      }
    })();

    return () => {
      mounted = false;
      if (gameRef.current) {
        try { gameRef.current.destroy(true); } catch (err) { console.warn('destroy err', err); }
        gameRef.current = null;
      }
    };
  }, []);

  useEffect(() => {
    if (selectedFile && gameRef.current) {
      try { (gameRef.current as any).events.emit('formation:selected', selectedFile); }
      catch (err) { console.warn('emit formation:selected failed', err); }
    }
  }, [selectedFile]);

  return (
    <div
      id="game-container"
      ref={rootRef}
      tabIndex={0}
      style={{ width: '100%', height: '100%', outline: 'none' }}
      onClick={() => { if (rootRef.current) rootRef.current.focus(); }}
    />
  );
}
